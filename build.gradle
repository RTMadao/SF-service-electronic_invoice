plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.RTM.services.co'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.1")
}

configurations {
	jaxb
}

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "https://vpfe-hab.dian.gov.co/WcfDianCustomerServices.svc?wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "com.RTM.services.co.electronicInvoice.wsdl") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	implementation 'org.springframework.ws:spring-ws-core'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.7.0'
	implementation 'org.xhtmlrenderer:flying-saucer-pdf:9.1.22'
	implementation 'com.google.zxing:core:3.5.0'
	implementation 'com.google.zxing:javase:3.5.0'
	implementation ('org.springframework.boot:spring-boot-starter-web-services') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	compileOnly 'org.projectlombok:lombok:1.18.24'
	runtimeOnly 'mysql:mysql-connector-java'

	dependencies {
		jaxb (
				'com.sun.xml.bind:jaxb-xjc:2.3.1',
				'com.sun.xml.bind:jaxb-impl:2.3.1',
				'org.glassfish.jaxb:jaxb-runtime:2.3.3'
		)
	}
	implementation(files(genJaxb.classesDir).builtBy(genJaxb))
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootJar {
	baseName = 'gs-consuming-web-service'
	version =  '0.0.1'
}

tasks.named('test') {
	useJUnitPlatform()
}